#!/usr/bin/env bash

set -eo pipefail

dots_dir="$(cd "$(dirname "$0")" && pwd -P)"
conf_dir="${XDG_CONFIG_DIR:=$HOME/.config}"

print_fancy() {
    echo "$(tput bold)* $(tput setaf 5)$*$(tput sgr0)"
}

update_dotfiles() {
    print_fancy "Updating dotfiles..."
    git pull origin master
}

install_software() {
    print_fancy "Installing software..."

    if [[ "$OSTYPE" == "darwin"* ]]; then
        source "$dots_dir/setup/macos-packages.sh"
    elif [ "$(lsb_release -si)" == "Ubuntu" ]; then
        source "$dots_dir/setup/ubuntu-packages.sh"
    else
        echo "Nothing to install!"
    fi
}

configure_settings() {
    symlink() {
        if [ -L "$2" ] && [ -e "$2" ]; then
            echo "Skipping existing symlink: $2"
        else
            echo "$1 â†’ $2"
            ln -sn "$1" "$2"
        fi
    }

    print_fancy "Adjusting application and system settings..."
    mkdir -p "$conf_dir"

    symlink "$dots_dir/nvim" "$conf_dir/nvim"
    symlink "$dots_dir/tmux" "$conf_dir/tmux"
    symlink "$dots_dir/zsh/config" "$conf_dir/zsh"
    symlink "$dots_dir/git/gitconfig" "$HOME/.gitconfig"
    symlink "$dots_dir/zsh/zshrc" "$HOME/.zshrc"

    if [[ "$OSTYPE" == "darwin"* ]]; then
        source "$dots_dir/setup/macos-defaults.sh"
    elif [[ "$OSTYPE" == "linux"* ]]; then
        source "$dots_dir/setup/linux-defaults.sh"
    fi

    echo "A reboot may be required for some settings to take effect."
}

print_help() {
    echo "usage: $(basename "$0") [OPTION]"
    echo "  -a,  --all                Perform all actions"
    echo "  -c,  --configure          Adjust application and system settings"
    echo "  -h,  --help               Display this help message"
    echo "  -i,  --install            Install software"
    echo "  -u,  --update             Pull latest dotfiles changes"
}

main() {
    if [ "$#" -eq 0 ]; then
        echo "error: no argument specified"
        echo "try '$(basename "$0") --help' for more info."
        exit 1
    else
        for flag in "$@"; do
            case $flag in
            -a|--all)
                update_dotfiles
                install_software
                configure_settings
                shift;;
            -c|--configure)
                configure_settings
                shift;;
            -h|--help)
                print_help
                shift;;
            -i|--install)
                install_software
                shift;;
            -u|--update)
                update_dotfiles
                shift;;
            *)
                echo "error: invalid argument: $flag"
                echo "try '$(basename "$0") --help' for more info."
                exit 1;;
            esac
        done
    fi
}

main "$@"
