#!/usr/bin/env bash

install_packages() {
    if [ "$system" != "mac" ]; then
        return
    fi

    if ! is_installed brew; then
        action_msg "Installing Homebrew"
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        brew analytics off
    fi

    action_msg "Installing software packages"
    brew bundle -v --no-lock --file="$bootstrap_path/scripts/Brewfile"
    brew cleanup
}

configure_settings() {
    link() {
        if [ -L "$2" ] && [ -e "$2" ]; then
            echo "Symlink to '$2' already exists!"
        else
            echo "$1 â†’ $2"
            ln -sn "$1" "$2"
        fi
    }

    local config_dir=${XDG_CONFIG_HOME:-$HOME/.config}
    mkdir -p "$config_dir"

    action_msg "Symlinking files"
    link "$bootstrap_path/zsh/zshrc"        "$HOME/.zshrc"
    link "$bootstrap_path/zsh/zshenv"       "$HOME/.zshenv"
    link "$bootstrap_path/git/gitconfig"    "$HOME/.gitconfig"
    link "$bootstrap_path/tmux/tmux.conf"   "$HOME/.tmux.conf"
    link "$bootstrap_path/nvim"             "$config_dir/nvim"

    if [ "$system" == "mac" ]; then
        action_msg "Adjusting system settings..."
        source "$bootstrap_path/scripts/mac-defaults.sh"
    fi
}

print_help() {
    echo "usage: $(basename "$0") [OPTION]"
    echo "  -e,  --everything             Boostraps a new machine"
    echo "  -h,  --help                   Display this help message"
    echo "  -p,  --packages               Install software packages"
    echo "  -s,  --settings               Adjust system and application settings"
}

main() {
    local bootstrap_path="$(cd "$(dirname "$0")" && pwd)"
    source "$bootstrap_path/scripts/utility.sh"
    local system="$(system_type)"

    if [ "$#" -eq 0 ]; then
        echo "$(basename "$0"): no argument specified" >&2
        echo "run \"$(basename "$0") --help\" for usage options" >&2
        exit 1
    else
        for flag in "$@"; do
            case $flag in
            -e|--everything)
                install_packages
                configure_settings
                shift;;
            -h|--help)
                print_help
                shift;;
            -p|--pacakges)
                install_packages
                shift;;
            -s|--settings)
                configure_settings
                shift;;
            *)
                echo "$(basename "$0"): invalid argument '$flag'" >&2
                echo "run \"$(basename "$0") --help\" for usage options" >&2
                exit 1;;
            esac
        done
    fi
}

main "$@"
